package napi

import (
	"bytes"
	"github.com/DaRealFreak/watcher-go/internal/http/tls_session"
	http "github.com/bogdanfinn/fhttp"
	log "github.com/sirupsen/logrus"
	"io"
	"strings"
	"time"
)

type DeviantArtErrorHandler struct {
	tls_session.TlsClientErrorHandler
	ModuleKey string
}

func (e DeviantArtErrorHandler) CheckResponse(response *http.Response) (error error, fatal bool) {
	if response.StatusCode == 403 {
		// 403 is being returned if we're over the rate limit instead of 429
		out, _ := io.ReadAll(response.Body)
		// reset reader for body
		response.Body = io.NopCloser(bytes.NewReader(out))

		// check for cloud front error
		if strings.Contains(string(out), "Generated by cloudfront (CloudFront)") {
			log.WithField("module", e.ModuleKey).Warn(
				"ran into 403 error from cloudfront, sleeping 2 minutes to recover rate limit",
			)

			time.Sleep(2 * time.Minute)

			return tls_session.StatusError{
				StatusCode: response.StatusCode,
			}, false
		}
	}

	return e.TlsClientErrorHandler.CheckResponse(response)
}

func (e DeviantArtErrorHandler) IsFatalError(_ error) bool {
	return false
}
