package api

import (
	"fmt"
	"net/http"
	"net/url"
	"strings"
)

// consoleRequest uses the API development console of DeviantArt to use a separate rate limitation
// overall it takes the role of load balancing since the refresh rate of the API requests is strangely not linear
func (a *DeviantartAPI) consoleRequest(endpoint string, values url.Values) (*http.Response, error) {
	// it would be possible to chain the commands but doesn't make a difference regarding the limit
	values = url.Values{
		"endpoint": {endpoint},
		"params": {
			a.getDeveloperConsoleCommand(
				endpoint,
				values,
			),
		},
	}

	res, err := a.UserSession.Post("https://www.deviantart.com/developers/console/do_api_request", values)
	if err != nil {
		return res, err
	}

	return res, nil
}

// getDeveloperConsoleCommand parses the endpoint and values into a string for the API console
func (a *DeviantartAPI) getDeveloperConsoleCommand(endpoint string, values url.Values) string {
	consoleCommandValues := url.Values{
		"da_version":     {""},
		"mature_content": {"true"},
		"endpoint":       {endpoint},
	}

	// copy API request values into our console command value set
	for key, singleValue := range values {
		for _, value := range singleValue {
			// delete before adding the key again to prevent multiple keys
			consoleCommandValues.Del(key)
			consoleCommandValues.Add(key, value)
		}
	}

	requestValues := make([]string, 0, len(consoleCommandValues))

	for k, v := range consoleCommandValues {
		requestValues = append(requestValues, fmt.Sprintf(`{"name":"%s","value":"%s"}`, k, v[0]))
	}

	return fmt.Sprintf(
		`[%s]`,
		strings.Join(requestValues, ","),
	)
}
