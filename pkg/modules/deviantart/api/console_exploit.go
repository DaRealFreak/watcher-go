package api

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

type consoleResponse struct {
	DiFi struct {
		Response struct {
			Calls []struct {
				Response struct {
					Status  string      `json:"status"`
					Content interface{} `json:"content"`
				} `json:"response"`
			} `json:"calls"`
		} `json:"response"`
	} `json:"DiFi"`
}

// consoleRequest uses the API development console of DeviantArt to use
func (a *DeviantartAPI) consoleRequest(endpoint string, values url.Values) (*http.Response, error) {
	// it would be possible to chain the commands but doesn't make a difference regarding the limit
	values = url.Values{
		"c[]": {
			a.getDeveloperConsoleCommand(
				endpoint,
				values,
			),
		},
		"t": {"json"},
	}

	// retrieve the user info cookie for the ui argument (validated server side)
	daURL, _ := url.Parse("https://deviantart.com")
	for _, cookie := range a.Session.GetClient().Jar.Cookies(daURL) {
		if cookie.Name == "userinfo" {
			ui, _ := url.QueryUnescape(cookie.Value)
			values.Set("ui", ui)

			break
		}
	}

	res, err := a.Session.Post("https://www.deviantart.com/global/difi/?", values)
	if err != nil {
		return res, err
	}

	return a.parseConsoleResponse(res)
}

// getDeveloperConsoleCommand parses the endpoint and values into a string for the API console
func (a *DeviantartAPI) getDeveloperConsoleCommand(endpoint string, values url.Values) string {
	// add specific console commands from the API console
	values.Set("da_version", "")
	values.Set("grant_type", "authorization_code")
	values.Set("mature_content", "true")
	values.Set("endpoint", endpoint)

	requestValues := make([]string, 0, len(values))

	for k, v := range values {
		requestValues = append(requestValues, fmt.Sprintf(`{"name":"%s","value":"%s"}`, k, v[0]))
	}

	return fmt.Sprintf(
		`"DeveloperConsole","do_api_request",["%s",[%s]]`,
		endpoint,
		strings.Join(requestValues, ","),
	)
}

// parseConsoleResponse modifies the passed http response to unwrap the added DiFi information
func (a *DeviantartAPI) parseConsoleResponse(res *http.Response) (*http.Response, error) {
	content, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return res, err
	}

	var consoleResponse consoleResponse
	if err := json.Unmarshal(content, &consoleResponse); err != nil {
		return res, err
	}

	// if request was not successful we treat it as a 429 status code
	// we want to switch back the API mode to default and we most likely won't get any other errors anyway
	if consoleResponse.DiFi.Response.Calls[0].Response.Status != "SUCCESS" {
		res.StatusCode = 429
	}

	marshalledResponse, err := json.Marshal(consoleResponse.DiFi.Response.Calls[0].Response.Content)
	if err != nil {
		return res, err
	}

	// replace the response body with our marshalledResponse (equal to the direct OAuth2 application response)
	res.Body = ioutil.NopCloser(bytes.NewReader(marshalledResponse))

	return res, nil
}
