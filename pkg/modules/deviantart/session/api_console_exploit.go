package session

import (
	"bytes"
	"compress/gzip"
	"encoding/json"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"

	log "github.com/sirupsen/logrus"
)

// APIConsoleExploit uses the developer console in the DeviantArt backend to use twice of the API rate limit
// and honestly, averaging 1 request every 180 seconds is horrendous for an API, even the now 1 request/90s is so low...
func (s *DeviantArtSession) APIConsoleExploit(endpoint string, values url.Values) (res *http.Response, err error) {
	res, err = s.APIConsoleSendRequest(endpoint, values)
	if err != nil {
		return res, err
	}

	return s.APIConsoleReadRequest(res)
}

// APIConsoleSendRequest converts the API request to a console API request and returns the server response
func (s *DeviantArtSession) APIConsoleSendRequest(endpoint string, values url.Values) (res *http.Response, err error) {
	values = url.Values{
		"c[]": {
			s.getDeveloperConsoleCommand(
				endpoint,
				values,
			),
		},
		"t": {"json"},
	}

	// retrieve the user info cookie for the ui argument (validated by the server)
	daURL, _ := url.Parse("https://deviantart.com")
	for _, cookie := range s.GetClient().Jar.Cookies(daURL) {
		if cookie.Name == "userinfo" {
			ui, _ := url.QueryUnescape(cookie.Value)
			values.Set("ui", ui)

			break
		}
	}

	log.WithField("module", s.ModuleKey).Debugf(
		"using developer console exploit for endpoint: %s", endpoint,
	)

	// send the POST request to the developer console
	return s.post("https://www.deviantart.com/global/difi/?", values, "")
}

// APIConsoleReadRequest reads und decompresses the HTTP response of the API console request
func (s *DeviantArtSession) APIConsoleReadRequest(res *http.Response) (apiRes *http.Response, err error) {
	var reader io.ReadCloser

	switch res.Header.Get("Content-Encoding") {
	case "gzip":
		reader, err = gzip.NewReader(res.Body)
		if err != nil {
			return nil, err
		}
	default:
		reader = res.Body
	}

	content, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}

	// unmarshal the response into the DeveloperConsoleResponse struct
	var consoleResponse DeveloperConsoleResponse

	if err := json.Unmarshal(content, &consoleResponse); err != nil {
		return nil, err
	}

	// if request was not successful we treat it as a 429 status code
	// we want to switch back the API mode to default and we most likely won't get any other errors anyway
	if consoleResponse.Response.Calls[0].Response.Status != "SUCCESS" {
		res.StatusCode = 429
	}

	marshalledResponse, err := json.Marshal(consoleResponse.DiFi.Response.Calls[0].Response.Content)
	if err != nil {
		return nil, err
	}
	// since we had to parse the content already reset the Content-Encoding header to prevent duplicate decompressing
	res.Header.Set("Content-Encoding", "")
	// replace the response body with our marshalledResponse (equal to the direct OAuth2 application response)
	res.Body = ioutil.NopCloser(bytes.NewReader(marshalledResponse))

	return res, err
}
